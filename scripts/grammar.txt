synset ::= (:ofs ofs :pos pos :keys keys :gloss gloss :tokens tokens)
ofs ::= [0-9]{8}
pos ::= [anrv]
keys ::= ( (sense-key . lemma)* )
sense-key ::= [see https://wordnet.princeton.edu/documentation/senseidx5wn]
lemma ::= [a string without spaces]
gloss ::= [a string]
tokens ::= wf | cf | glob | def | ex | aux | classif | mwf | qf
wf ::= (:kind :wf :form form ?(:lemma lemma) ?(:pos tk-pos) :tag tag ?(:senses senses) ?(:sep sep) ?(:type type) ?(:rdf rdf) ?(:unsure unsure))
form ::= lemma
tk-pos ::= [see glosstag.dtd]
tag ::= "un" | "auto" | "man" | "ignore" | "nosense"
senses ::= keys
sep ::= "" | "-"
type ::= "punc" | "year" | "chem" | "num" | "time" | "symb" | "curr" | "math" | "abbr" | "acronym"
rdf ::= lemma
unsure ::= t | nil
cf ::= (:kind (:cf coll-key+) :form form ?(:lemma lemma) ?(:pos tk-pos) :tag tag ?(:senses senses) ?(:sep sep) ?(:type type) ?(:rdf rdf) ?(:unsure unsure))
coll-key ::= [a-z]
glob ::= (:kind (:glob . coll-key) :lemma lemma ?(:tag tag) ?(:senses senses) :glob glob-how)
glob-how ::= "man" | "auto"
def ::= (:kind :def :action action)
action ::= beg | end
ex ::= (:kind :ex :action action)
aux ::= (:kind :aux :action action ?(:tag aux-tag)? ?(:type aux-type)?)
aux-tag ::= ignore
aux-type ::= arg
classif ::= (:kind :classif :action action ?(:type classif-type))
classif-type ::= cat | use | reg | unk
mwf ::= (:kind :mwf :action action ?(:type mwf-type))
mwf-type ::= [see glosstag.dtd]
qf ::= (:kind :qf :action action :rend rend)
rend ::= :sq | :dq
